// Generated by view binder compiler. Do not edit!
package com.example.nandogami.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.nandogami.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.CollapsingToolbarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityDetailBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBar;

  @NonNull
  public final ChipGroup chipGroupCategories;

  @NonNull
  public final ChipGroup chipGroupThemes;

  @NonNull
  public final CollapsingToolbarLayout collapsingToolbar;

  @NonNull
  public final RatingBar detailRatingBar;

  @NonNull
  public final MaterialToolbar detailToolbar;

  @NonNull
  public final TextView headerAlternativeTitles;

  @NonNull
  public final TextView headerDiscover;

  @NonNull
  public final ImageView ivDetailImage;

  @NonNull
  public final LinearLayout layoutAdaptations;

  @NonNull
  public final RecyclerView rvDiscover;

  @NonNull
  public final TextView tvAlternativeTitles;

  @NonNull
  public final TextView tvDetailAuthor;

  @NonNull
  public final TextView tvDetailRatingValue;

  @NonNull
  public final TextView tvDetailSynopsis;

  @NonNull
  public final TextView tvDetailTitle;

  @NonNull
  public final TextView tvDetailTypeBadge;

  @NonNull
  public final TextView tvInfoChapters;

  @NonNull
  public final TextView tvInfoFormat;

  @NonNull
  public final TextView tvInfoReleaseYear;

  @NonNull
  public final TextView tvInfoType;

  private ActivityDetailBinding(@NonNull CoordinatorLayout rootView, @NonNull AppBarLayout appBar,
      @NonNull ChipGroup chipGroupCategories, @NonNull ChipGroup chipGroupThemes,
      @NonNull CollapsingToolbarLayout collapsingToolbar, @NonNull RatingBar detailRatingBar,
      @NonNull MaterialToolbar detailToolbar, @NonNull TextView headerAlternativeTitles,
      @NonNull TextView headerDiscover, @NonNull ImageView ivDetailImage,
      @NonNull LinearLayout layoutAdaptations, @NonNull RecyclerView rvDiscover,
      @NonNull TextView tvAlternativeTitles, @NonNull TextView tvDetailAuthor,
      @NonNull TextView tvDetailRatingValue, @NonNull TextView tvDetailSynopsis,
      @NonNull TextView tvDetailTitle, @NonNull TextView tvDetailTypeBadge,
      @NonNull TextView tvInfoChapters, @NonNull TextView tvInfoFormat,
      @NonNull TextView tvInfoReleaseYear, @NonNull TextView tvInfoType) {
    this.rootView = rootView;
    this.appBar = appBar;
    this.chipGroupCategories = chipGroupCategories;
    this.chipGroupThemes = chipGroupThemes;
    this.collapsingToolbar = collapsingToolbar;
    this.detailRatingBar = detailRatingBar;
    this.detailToolbar = detailToolbar;
    this.headerAlternativeTitles = headerAlternativeTitles;
    this.headerDiscover = headerDiscover;
    this.ivDetailImage = ivDetailImage;
    this.layoutAdaptations = layoutAdaptations;
    this.rvDiscover = rvDiscover;
    this.tvAlternativeTitles = tvAlternativeTitles;
    this.tvDetailAuthor = tvDetailAuthor;
    this.tvDetailRatingValue = tvDetailRatingValue;
    this.tvDetailSynopsis = tvDetailSynopsis;
    this.tvDetailTitle = tvDetailTitle;
    this.tvDetailTypeBadge = tvDetailTypeBadge;
    this.tvInfoChapters = tvInfoChapters;
    this.tvInfoFormat = tvInfoFormat;
    this.tvInfoReleaseYear = tvInfoReleaseYear;
    this.tvInfoType = tvInfoType;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBar;
      AppBarLayout appBar = ViewBindings.findChildViewById(rootView, id);
      if (appBar == null) {
        break missingId;
      }

      id = R.id.chipGroupCategories;
      ChipGroup chipGroupCategories = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupCategories == null) {
        break missingId;
      }

      id = R.id.chipGroupThemes;
      ChipGroup chipGroupThemes = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupThemes == null) {
        break missingId;
      }

      id = R.id.collapsingToolbar;
      CollapsingToolbarLayout collapsingToolbar = ViewBindings.findChildViewById(rootView, id);
      if (collapsingToolbar == null) {
        break missingId;
      }

      id = R.id.detailRatingBar;
      RatingBar detailRatingBar = ViewBindings.findChildViewById(rootView, id);
      if (detailRatingBar == null) {
        break missingId;
      }

      id = R.id.detailToolbar;
      MaterialToolbar detailToolbar = ViewBindings.findChildViewById(rootView, id);
      if (detailToolbar == null) {
        break missingId;
      }

      id = R.id.headerAlternativeTitles;
      TextView headerAlternativeTitles = ViewBindings.findChildViewById(rootView, id);
      if (headerAlternativeTitles == null) {
        break missingId;
      }

      id = R.id.headerDiscover;
      TextView headerDiscover = ViewBindings.findChildViewById(rootView, id);
      if (headerDiscover == null) {
        break missingId;
      }

      id = R.id.ivDetailImage;
      ImageView ivDetailImage = ViewBindings.findChildViewById(rootView, id);
      if (ivDetailImage == null) {
        break missingId;
      }

      id = R.id.layoutAdaptations;
      LinearLayout layoutAdaptations = ViewBindings.findChildViewById(rootView, id);
      if (layoutAdaptations == null) {
        break missingId;
      }

      id = R.id.rvDiscover;
      RecyclerView rvDiscover = ViewBindings.findChildViewById(rootView, id);
      if (rvDiscover == null) {
        break missingId;
      }

      id = R.id.tvAlternativeTitles;
      TextView tvAlternativeTitles = ViewBindings.findChildViewById(rootView, id);
      if (tvAlternativeTitles == null) {
        break missingId;
      }

      id = R.id.tvDetailAuthor;
      TextView tvDetailAuthor = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailAuthor == null) {
        break missingId;
      }

      id = R.id.tvDetailRatingValue;
      TextView tvDetailRatingValue = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailRatingValue == null) {
        break missingId;
      }

      id = R.id.tvDetailSynopsis;
      TextView tvDetailSynopsis = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailSynopsis == null) {
        break missingId;
      }

      id = R.id.tvDetailTitle;
      TextView tvDetailTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailTitle == null) {
        break missingId;
      }

      id = R.id.tvDetailTypeBadge;
      TextView tvDetailTypeBadge = ViewBindings.findChildViewById(rootView, id);
      if (tvDetailTypeBadge == null) {
        break missingId;
      }

      id = R.id.tvInfoChapters;
      TextView tvInfoChapters = ViewBindings.findChildViewById(rootView, id);
      if (tvInfoChapters == null) {
        break missingId;
      }

      id = R.id.tvInfoFormat;
      TextView tvInfoFormat = ViewBindings.findChildViewById(rootView, id);
      if (tvInfoFormat == null) {
        break missingId;
      }

      id = R.id.tvInfoReleaseYear;
      TextView tvInfoReleaseYear = ViewBindings.findChildViewById(rootView, id);
      if (tvInfoReleaseYear == null) {
        break missingId;
      }

      id = R.id.tvInfoType;
      TextView tvInfoType = ViewBindings.findChildViewById(rootView, id);
      if (tvInfoType == null) {
        break missingId;
      }

      return new ActivityDetailBinding((CoordinatorLayout) rootView, appBar, chipGroupCategories,
          chipGroupThemes, collapsingToolbar, detailRatingBar, detailToolbar,
          headerAlternativeTitles, headerDiscover, ivDetailImage, layoutAdaptations, rvDiscover,
          tvAlternativeTitles, tvDetailAuthor, tvDetailRatingValue, tvDetailSynopsis, tvDetailTitle,
          tvDetailTypeBadge, tvInfoChapters, tvInfoFormat, tvInfoReleaseYear, tvInfoType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
